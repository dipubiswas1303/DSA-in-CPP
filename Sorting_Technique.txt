

Here’s a comprehensive list of common sorting techniques categorized into their types:

---

### Comparison-Based Sorting Algorithms
1. Bubble Sort  
   - Repeatedly swaps adjacent elements if they are in the wrong order.  
   - Time Complexity: O(n²)  
   - Space Complexity: O(1)  

2. Selection Sort  
   - Repeatedly selects the minimum element and places it at the beginning.  
   - Time Complexity: O(n²)  
   - Space Complexity: O(1)

3. Insertion Sort  
   - Builds the sorted list one element at a time by inserting elements in their correct position.  
   - Time Complexity: O(n²)  
   - Space Complexity: O(1)

4. Merge Sort  
   - Divides the array into halves, sorts each half, and merges them.  
   - Time Complexity: O(n log n)  
   - Space Complexity: O(n)  

5. Quick Sort  
   - Divides the array based on a pivot, then sorts each partition.  
   - Time Complexity: O(n log n) (average), O(n²) (worst case)  
   - Space Complexity: O(log n) (in-place)  

6. Heap Sort  
   - Uses a binary heap to sort the array.  
   - Time Complexity: O(n log n)  
   - Space Complexity: O(1)

7. Shell Sort  
   - Generalization of insertion sort with gaps between compared elements.  
   - Time Complexity: O(n log² n) (depends on gap sequence)  
   - Space Complexity: O(1)

8. Tim Sort  
   - Hybrid of merge and insertion sort (used in Python and Java).  
   - Time Complexity: O(n log n)  
   - Space Complexity: O(n)  

---

### Non-Comparison-Based Sorting Algorithms
1. Counting Sort  
   - Counts occurrences of each element and uses this count to place them in sorted order.  
   - Time Complexity: O(n + k) (where k is the range of input values)  
   - Space Complexity: O(n + k)  

2. Radix Sort  
   - Processes digits of numbers from least to most significant using counting sort as a subroutine.  
   - Time Complexity: O(nk) (where k is the number of digits)  
   - Space Complexity: O(n + k)

3. Bucket Sort  
   - Distributes elements into buckets, sorts each bucket, and concatenates them.  
   - Time Complexity: O(n + k) (average case)  
   - Space Complexity: O(n + k)

---

### Specialized Sorting Algorithms
1. Bogo Sort  
   - Randomly shuffles the array until it is sorted.  
   - Time Complexity: O((n-1)!)  
   - Space Complexity: O(1)

2. Cocktail Shaker Sort  
   - A bidirectional bubble sort.  
   - Time Complexity: O(n²)  
   - Space Complexity: O(1)

3. Pigeonhole Sort  
   - Distributes elements into pigeonholes based on their key.  
   - Time Complexity: O(n + k)  
   - Space Complexity: O(n + k)

4. Bitonic Sort (used in parallel computing)  
   - Sorts by recursively creating bitonic sequences.  
   - Time Complexity: O(log² n)  
   - Space Complexity: O(n)

5. Comb Sort  
   - Improves bubble sort by comparing elements at a gap larger than 1.  
   - Time Complexity: O(n log n) (average)  
   - Space Complexity: O(1)

---

Would you like further explanations or implementations of any of these?